module Benchmarks.GenericEqualityObjectArrayBenchmark

open System
open BenchmarkDotNet.Attributes

module FastEquality =
    type T = T with
        static member inline ($) (_, structEquatable: ^a when ^a :> IEquatable< ^a> and ^a: struct) = fun (value: ^a) -> structEquatable.Equals(value)
        static member inline ($) (_, refEquatable: 'a when 'a: not struct) = fun (value: 'b when 'b: not struct) -> refEquatable.Equals(value)

    let inline (====) a b = (T $ a) b

open FastEquality

type [<Struct>] AutoGeneratedNested = {
    Value1: string
    Value2: int
}

type [<Struct>] AutoGenerated = {
    Value1: string
    Value2: int
    Value3: double
    Value4: AutoGeneratedNested
}

let makeAutoGeneratedNested value : AutoGeneratedNested = {
    Value1 = "Bla"
    Value2 = value
}

let makeAutoGenerated value : AutoGenerated = {
    Value1 = "Bla"
    Value2 = value
    Value3 = 10.
    Value4 = makeAutoGeneratedNested value
}

let inline manualEquality (value1: AutoGenerated) (value2: AutoGenerated) =
    value1.Value1.Equals(value2.Value1)
    && value1.Value2.Equals(value2.Value2)
    && value1.Value3.Equals(value2.Value3)
    && value1.Value4.Value1.Equals(value2.Value4.Value1)
    && value1.Value4.Value2.Equals(value2.Value4.Value2)

let inline slowIEquatableEquality (value1: #IEquatable<'a>) (value2: #IEquatable<'a>) = value1.Equals(value2)
let inline fastIEquatableEquality<'a when 'a :> IEquatable<'a>> (value1: 'a) (value2: 'a) = value1.Equals(value2)

let inline inrefIEquatableEquality<'a when 'a :> IEquatable<'a>> (value1: 'a inref) (value2: 'a inref) = value1.Equals(value2)
let inline byrefIEquatableEquality<'a when 'a :> IEquatable<'a>> (value1: 'a byref) (value2: 'a byref) = value1.Equals(value2)

let defaultValue = makeAutoGenerated 100500
let defaultValue2 = makeAutoGenerated 100500
let array1 = Array.init 1000 makeAutoGenerated
let array2 = Array.init 1000 makeAutoGenerated

let list1 = List.init 1000 makeAutoGenerated
let list2 = List.init 1000 makeAutoGenerated

[<MemoryDiagnoser; DisassemblyDiagnoser>]
type Benchmark() =

    [<Benchmark>]
    member x.TestAutoGeneratedEquality() =
        Array.forall2 (fun first second -> first = second) array1 array2

    [<Benchmark>]
    member x.TestAutoGeneratedEqualityForArrayDirectly() =
        array1 = array2

    [<Benchmark>]
    member x.TestAutoGeneratedEqualityUsingIEquatable() =
        Array.forall2 (fun first second -> fastIEquatableEquality first second) array1 array2

    [<Benchmark>]
    member x.TestAutoGeneratedEqualityUsingSequenceEquals() =
        array1.AsSpan().SequenceEqual(array2)

    [<Benchmark>]
    member x.TestAutoGeneratedEqualityUsingAnotherFasterOperator() =
        Array.forall2 (fun first second -> first ==== second) array1 array2

    [<Benchmark>]
    member x.TestAutoGeneratedEqualityWithLists() =
        List.forall2 (fun first second -> first = second) list1 list2

    [<Benchmark>]
    member x.TestAutoGeneratedEqualityWithListsDirectly() =
        list1 = list2

    [<Benchmark>]
    member x.TestAutoGeneratedEqualityUsingIEquatableWithLists() =
        List.forall2 (fun first second -> fastIEquatableEquality first second) list1 list2