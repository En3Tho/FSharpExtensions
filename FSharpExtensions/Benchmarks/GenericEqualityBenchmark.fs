module Benchmarks.GenericEqualityBenchmark

open System
open System.Runtime.CompilerServices
open BenchmarkDotNet.Attributes
open En3Tho.FSharp.Extensions.Object.Operators

module FastEquality =
    type T = T with
        static member inline ($) (_, structEquatable: ^a when ^a :> IEquatable< ^a> and ^a: struct) = fun (value: ^a) -> structEquatable.Equals(value)
        //static member inline ($) (_, refEquatable: #IEquatable<'a> when 'a: not struct) = fun (value: #IEquatable<'a>) -> value.Equals(refEquatable)
        static member inline ($) (_, refEquatable: 'a when 'a: not struct) = fun (value: 'b when 'b: not struct) -> refEquatable.Equals(value)

    let inline (====) a b = (T $ a) b

type Kok() =
    interface IEquatable<Kok> with
        member this.Equals(other) = true

[<MethodImpl(MethodImplOptions.AggressiveInlining)>]
let (===) (a: 'a) (b: 'b) =
    match (box a, box b) with
    | :? IEquatable<'a> as a, (:? IEquatable<'a> as b) -> a.Equals(b)
    | _ -> a.Equals(b)

open FastEquality

module Reference =

    type AutoGeneratedNested = {
        Value1: string
        Value2: int
    }

    type AutoGenerated = {
        Value1: string
        Value2: int
        Value3: double
        Value4: AutoGeneratedNested
    }

    let makeAutoGeneratedNested value : AutoGeneratedNested = {
        Value1 = "Bla"
        Value2 = value
    }

    let makeAutoGenerated value : AutoGenerated = {
        Value1 = "Bla"
        Value2 = value
        Value3 = 10.
        Value4 = makeAutoGeneratedNested value
    }

    let inline manualEquality (value1: AutoGenerated) (value2: AutoGenerated) =
        value1.Value1.Equals(value2.Value1)
        && value1.Value2.Equals(value2.Value2)
        && value1.Value3.Equals(value2.Value3)
        && value1.Value4.Value1.Equals(value2.Value4.Value1)
        && value1.Value4.Value2.Equals(value2.Value4.Value2)

    let inline slowIEquatableEquality (value1: #IEquatable<'a>) (value2: #IEquatable<'a>) = value1.Equals(value2)
    let inline fastIEquatableEquality<'a when 'a :> IEquatable<'a>> (value1: 'a) (value2: 'a) = value1.Equals(value2)

    let defaultValue = makeAutoGenerated 100500
    let defaultValue2 = makeAutoGenerated 100500
    let array1 = Array.init 1000 makeAutoGenerated
    let array2 = Array.init 1000 makeAutoGenerated

    [<MemoryDiagnoser; DisassemblyDiagnoser>]
    type Benchmark() =

        [<Benchmark>]
        member x.TestAutoGeneratedEquality() =
            Array.forall2 (fun first second -> first = second) array1 array2

        [<Benchmark>]
        member x.TestAutoGeneratedEqualityUsingIEquatable() =
            Array.forall2 (fun first second -> fastIEquatableEquality first second) array1 array2

        [<Benchmark>]
        member x.TestAutoGeneratedEqualityUsingFasterOperator() =
            Array.forall2 (fun first second -> first === second) array1 array2

        [<Benchmark>]
        member x.TestAutoGeneratedEqualityUsingAnotherFasterOperator() =
            Array.forall2 (fun first second -> first ==== second) array1 array2
//
//        [<Benchmark>]
//        member x.TestAutoGeneratedEqualityUsingIEquatableOperator() =
//            Array.forall2 (fun first second -> first ^== second) array1 array2
//
//        [<Benchmark>]
//        member x.TestManualEquality() =
//            Array.forall2 (fun first second -> manualEquality first second) array1 array2
//
//        [<Benchmark>]
//        member x.TestSimpleEqualityWithSimilarObject() =
//            defaultValue = defaultValue2
//
//        [<Benchmark>]
//        member x.TestIEquatableEqualityWithSimilarObject() =
//            defaultValue ^== defaultValue2

module Value =

    type [<Struct>] AutoGeneratedNested = {
        Value1: string
        Value2: int
    }

    type [<Struct>] AutoGenerated = {
        Value1: string
        Value2: int
        Value3: double
        Value4: AutoGeneratedNested
    }

    let makeAutoGeneratedNested value : AutoGeneratedNested = {
        Value1 = "Bla"
        Value2 = value
    }

    let makeAutoGenerated value : AutoGenerated = {
        Value1 = "Bla"
        Value2 = value
        Value3 = 10.
        Value4 = makeAutoGeneratedNested value
    }

    let inline manualEquality (value1: AutoGenerated) (value2: AutoGenerated) =
        value1.Value1.Equals(value2.Value1)
        && value1.Value2.Equals(value2.Value2)
        && value1.Value3.Equals(value2.Value3)
        && value1.Value4.Value1.Equals(value2.Value4.Value1)
        && value1.Value4.Value2.Equals(value2.Value4.Value2)

    let inline slowIEquatableEquality (value1: #IEquatable<'a>) (value2: #IEquatable<'a>) = value1.Equals(value2)
    let inline fastIEquatableEquality<'a when 'a :> IEquatable<'a>> (value1: 'a) (value2: 'a) = value1.Equals(value2)

    let inline inrefIEquatableEquality<'a when 'a :> IEquatable<'a>> (value1: 'a inref) (value2: 'a inref) = value1.Equals(value2)
    let inline byrefIEquatableEquality<'a when 'a :> IEquatable<'a>> (value1: 'a byref) (value2: 'a byref) = value1.Equals(value2)

    let defaultValue = makeAutoGenerated 100500
    let defaultValue2 = makeAutoGenerated 100500
    let array1 = Array.init 1000 makeAutoGenerated
    let array2 = Array.init 1000 makeAutoGenerated

    [<MemoryDiagnoser; DisassemblyDiagnoser>]
    type Benchmark() =

        [<Benchmark>]
        member x.TestAutoGeneratedEquality() =
            Array.forall2 (fun first second -> first = second) array1 array2

        [<Benchmark>]
        member x.TestAutoGeneratedEqualityUsingIEquatable() =
            Array.forall2 (fun first second -> fastIEquatableEquality first second) array1 array2

        [<Benchmark>]
        member x.TestAutoGeneratedEqualityUsingFasterOperator() =
            Array.forall2 (fun first second -> first === second) array1 array2

        [<Benchmark>]
        member x.TestAutoGeneratedEqualityUsingAnotherFasterOperator() =
            Array.forall2 (fun first second -> first ==== second) array1 array2

//        [<Benchmark>]
//        member x.TestAutoGeneratedEqualityUsingIEquatableOperator() =
//            Array.forall2 (fun first second -> first ^== second) array1 array2
//
//        [<Benchmark>]
//        member x.TestManualEquality() =
//            Array.forall2 (fun first second -> manualEquality first second) array1 array2
//
//        [<Benchmark>]
//        member x.TestSimpleEqualityWithSimilarObject() =
//            defaultValue = defaultValue2
//
//        [<Benchmark>]
//        member x.TestIEquatableEqualityWithSimilarObject() =
//            defaultValue ^== defaultValue2
//
//        [<Benchmark>]
//        member x.TestAutoGeneratedEqualityUsingIEquatableAndByref() =
//            let array = array1
//            let array2 = array2
//            let mutable result = true
//            let mutable i = 0
//            while result && i < array.Length do
//                result <- byrefIEquatableEquality &array.[i] &array2.[i]
//                i <- i + 1